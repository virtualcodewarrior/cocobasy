{"version":3,"sources":["../src/tools.js"],"names":["dashesToCamelCase","inputString","replace","char","toUpperCase","camelCaseToDashes","length","toLowerCase","createQuickAccess","inputHTMLElement","tag","Array","from","querySelectorAll","reduce","previous","element","getAttribute"],"mappings":"OAKO,SAASA,kBAAkBC,GAAe,OAAOA,EAAYC,QAAQ,mBAAoBC,GAASA,EAAK,GAAGC,gBAAeF,QAAQ,MAAO,WAOxI,SAASG,kBAAkBJ,GAAe,OAAOA,EAAYC,QAAQ,gBAAiBC,GAAWA,EAAKG,OAAS,EAAK,GAAGH,EAAK,MAAMA,EAAK,GAAGI,gBAAkB,IAAIJ,EAAK,GAAGI,yBASxK,SAASC,kBAAkBC,EAAkBC,GACnD,OAAOC,MAAMC,KAAKH,EAAiBI,iBAAiB,IAAIH,OAASI,QAAO,CAACC,EAAUC,KAAcD,EAASf,kBAAkBgB,EAAQC,aAAaP,KAASM,EAAgBD,IAAa","file":"tools.js","sourcesContent":["/**\n * Converts a string consisting of dashes to camel case, e.g. test-with-dashes becomes testWithDashes\n * @param {string} inputString The input string that will be converted\n * @returns {string} An output string in camel case\n */\nexport function dashesToCamelCase(inputString) { return inputString.replace(/-([a-z0-9A-Z])/g, (char) => char[1].toUpperCase()).replace(/-$/g, ''); }\n\n/**\n * Converts a camel case string to an all lower case string containing dashes. e.g. testString becomes test-string and Test becomes test\n * @param {string} inputString The input string that will be converted\n * @returns {string} The resulting all lower case string\n */\nexport function camelCaseToDashes(inputString) { return inputString.replace(/[a-z]?[A-Z]/g, (char) => ((char.length > 1) ? `${char[0]}-${char[1].toLowerCase()}` : `-${char[0].toLowerCase()}`)); }\n\n/**\n * Get the child elements of the given HTMLElement and finds the attribute using the given key. It then puts all those objects in an object for quick access\n * This only will give the expected results if all values for the keys are unique\n * @param {HTMLElement|DocumentFragment|Document|ShadowRoot} inputHTMLElement The HTMElement that contains the children for which we want to retrieve the keys\n * @param {string} tag The attribute tag for which we are building this object (e.g. 'id')\n * @returns {object} An object where each member references the HTMLElement that had the attribute with the given tag, attributes with dashes are converted to camel case\n */\nexport function createQuickAccess(inputHTMLElement, tag) {\n\treturn Array.from(inputHTMLElement.querySelectorAll(`[${tag}]`)).reduce((previous, element) => { previous[dashesToCamelCase(element.getAttribute(tag))] = element; return previous; }, {});\n}\n"]}